<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>如何在半天内利用Hexo+Github Page搭建个人博客</title>
      <link href="/%E5%A6%82%E4%BD%95%E5%9C%A8%E5%8D%8A%E5%A4%A9%E5%86%85%E5%88%A9%E7%94%A8Hexo+Github%20Page%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2.html"/>
      <url>/%E5%A6%82%E4%BD%95%E5%9C%A8%E5%8D%8A%E5%A4%A9%E5%86%85%E5%88%A9%E7%94%A8Hexo+Github%20Page%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2.html</url>
      
        <content type="html"><![CDATA[<p>作为一个程序员，个人觉得博客和Github用来记录自己的学习历程最为合适不过，相信大部分的学习编程的人应该都会用过Github,而Github Page 依托着Github的项目适合用来展示项目的Demo。这里我们用来Hexo+Github Page搭建个人博客最适合不过了。</p><h3 id="需要具备的知识"><a href="#需要具备的知识" class="headerlink" title="需要具备的知识"></a>需要具备的知识</h3><pre><code>1.Git的基本命令知识2.Windows的基本命令（DOS命令）3.爱折腾的意识（其实就很简单但需要踩坑爬坑）4.一定的搜索学习能力</code></pre><h3 id="需要用到的工具"><a href="#需要用到的工具" class="headerlink" title="需要用到的工具"></a>需要用到的工具</h3><pre><code>1.Node.js(6.9版本以上)2.Git&amp;Github3.Hexo</code></pre><h3 id="（一）安装Node-js"><a href="#（一）安装Node-js" class="headerlink" title="（一）安装Node.js"></a>（一）安装Node.js</h3><p>在Windows操作系统下，按下win+R 后输入 cmd 调出 windows命令行终端查看Node.js版本</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">node -v</span><br></pre></td></tr></table></figure><p>如果显示版本不是6.9或以上，请重新安装。如果显示不是内部处理文件，则未安装Node.js<br><a href="https://nodejs.org/en/" target="_blank" rel="noopener">Node官网</a>    下载安装node.js</p><p>安装完Node.js后需要配置一下windows环境变量，在我的电脑–&gt;高级系统设置–&gt;高级–&gt;环境变量 </p><p> 配置Path环境变量以便DOS命令能够运行Node.js命令</p><p>Path环境变量中加入你安装Node目录的node.exe所在的目录，这里我安装在G盘下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">;G:\Instrallations\nodejs</span><br></pre></td></tr></table></figure><p>再次检查Node.js版本，在Dos中输入下面的命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">node -v</span><br></pre></td></tr></table></figure><p>显示的版本号在6.9版本或以上即为完成Node.js安装</p><h3 id="（二）安装Git"><a href="#（二）安装Git" class="headerlink" title="（二）安装Git"></a>（二）安装Git</h3><p><a href="https://git-scm.com/" target="_blank" rel="noopener">Git官网</a>        下载安装Git<br>可以自行下载安装，如果安装步骤不会可以百度或者可以参考博文    <a href="https://www.cnblogs.com/ximiaomiao/p/7140456.html" target="_blank" rel="noopener">Git安装和使用</a></p><p>安装好Git之后，需要在    我的电脑–&gt;高级系统设置–&gt;高级–&gt;环境变量  配置Path环境变量<br>这里以我安装的Git目录为例，请自行替换路径</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">;G:\Instrallations\Git</span><br></pre></td></tr></table></figure><p>然后在windows dos命令行中输入以下命令 是否显示git的版本信息 是则表示安装成功</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git --version</span><br></pre></td></tr></table></figure><h3 id="（三）创建Github和Github-Page"><a href="#（三）创建Github和Github-Page" class="headerlink" title="（三）创建Github和Github Page"></a>（三）创建Github和Github Page</h3><p>去<a href="https://github.com/" target="_blank" rel="noopener">Github官网</a> 注册一个Github账号，需要注意邮箱必须填常用的，它是Github用来发提示信息和推送信息给你的，在忘记密码后也是通过邮箱找回</p><p>接着去<a href="https://pages.github.com/" target="_blank" rel="noopener">Github Page官网</a>    按照官网的详细教程 创建个人项目为主页的静态页面。（此处英文水平不是很好的建议使用网页的翻译为中文）</p><h3 id="（四）Git与Github设置SSH-通过Git把Github刚刚创建的项目克隆到本地库"><a href="#（四）Git与Github设置SSH-通过Git把Github刚刚创建的项目克隆到本地库" class="headerlink" title="（四）Git与Github设置SSH,通过Git把Github刚刚创建的项目克隆到本地库"></a>（四）Git与Github设置SSH,通过Git把Github刚刚创建的项目克隆到本地库</h3><p>在Git Bash中输入以下命令，如果显示：No such file or directory 则表示本地没有SSH秘钥，需要我们新建一个SSH</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> ~/.ssh</span><br></pre></td></tr></table></figure><p>生成本地的SSH,这里邮箱地址可以输入自己的邮箱地址，这里的「-C」的是大写的「C」</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ ssh-keygen -t rsa -C <span class="string">"邮件地址@qq.com"</span></span><br><span class="line">Generating public/private rsa key pair.</span><br><span class="line">Enter file <span class="keyword">in</span> <span class="built_in">which</span> to save the key(/Users/your_user_directory/.ssh/id_rsa):&lt;回车就好&gt;</span><br></pre></td></tr></table></figure><p>然后设置一个密码（后面使用Git提交到Github的时候会用到，这里设置好请记录下来）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Enter passphrase (empty <span class="keyword">for</span> no passphrase):&lt;输入加密串&gt;</span><br><span class="line">Enter same passphrase again:&lt;再次输入加密串&gt;</span><br></pre></td></tr></table></figure><p>注意：因为Linux 命令(Git Bash)下输入密码是无提示(即不会显示<strong>***</strong>)，这里直接输入即可，输入完按回车。</p><p>检查是否生成SSH秘钥的方法：打开C:\Users\Administrator\目录看是否存在id_rsa以及id _rsa.pub文件，存在则生成成功</p><h3 id="（五）Git通过SSH连接到Gthub"><a href="#（五）Git通过SSH连接到Gthub" class="headerlink" title="（五）Git通过SSH连接到Gthub"></a>（五）Git通过SSH连接到Gthub</h3><p>登录Github官网点击右上角的 Account Settings—&gt;SSH Public keys —&gt; add another public keys<br>打开上面目录的 id_rsa.pub 文件,全选里面的秘钥内容，复制到Github的Key文本框 点击 add key<br>key上面的标题随便起一个名字即可。</p><p>测试是否连接成功，输入下面的命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ssh -T git@Github.com</span><br></pre></td></tr></table></figure><p>接着会提示你输入之前设定的id_rsa的密码，设定密码是为了保障Github与Git的传输安全</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Enter passphrase <span class="keyword">for</span> key <span class="string">'/c/Users/Administrator/.ssh/id_rsa'</span>:</span><br></pre></td></tr></table></figure><p>如果查看结果输出以下信息，则表示成功连接</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Hi bobi8344! You<span class="string">'ve successfully authenticated, but GitHub does not provide shell access</span></span><br></pre></td></tr></table></figure><h3 id="（六）安装Hexo"><a href="#（六）安装Hexo" class="headerlink" title="（六）安装Hexo"></a>（六）安装Hexo</h3><p><a href="https://hexo.io/" target="_blank" rel="noopener">hexo官网</a>  安装hexo完全是参考官方的文档，包括后面的设置主题等都是参考官方的文档，这里建议最好是看英文文档，因为网页翻译有时候会翻译得不准确。</p><p>在Windows中执行以下命令安装Hexo</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-cli -g</span><br></pre></td></tr></table></figure><p>安装完后，会在C:\Users\Administrator\AppData\Roaming\npm (以我的win10为例）目录下生成<br>node_modules文件夹以及hexo.cmd和hexo，非win10在Dos查看具体目录验证是否成功安装hexo</p><p>安装完Hexo后需要对Hexo进行初始化，官方的文档在blog文件中初始化，这里建议新建在自己方便管理的文件夹例如我在H盘新建hexo文件夹，然后通过Git Bash转到这个文件夹再执行初始化命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ hexo init blog</span><br><span class="line">$ <span class="built_in">cd</span> blog</span><br><span class="line">$ npm install</span><br></pre></td></tr></table></figure><p>初始化完成后会在blog目录下生成以下文件夹及文件</p><p>├── _config.yml<br>├── package.json<br>├── scaffolds<br>├── source<br>|   ├── _drafts<br>|   └── _posts<br>└── themes</p><p>然后执行以下命令，在浏览器输入<a href="http://localhost:4000/" target="_blank" rel="noopener">http://localhost:4000/</a>就可以查看本地生成博客模板</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ hexo g </span><br><span class="line">$ hexo s</span><br></pre></td></tr></table></figure><p>做到这一步就基本上已经完成百分之八十</p><h3 id="七-克隆Github远程仓库到本地库并安装Hexo部署插件"><a href="#七-克隆Github远程仓库到本地库并安装Hexo部署插件" class="headerlink" title="(七)克隆Github远程仓库到本地库并安装Hexo部署插件"></a>(七)克隆Github远程仓库到本地库并安装Hexo部署插件</h3><p>在blog下运行Git Bash，执行下面的命令,把clone后面的地址替换成要克隆的仓库的地址</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/bobi8344/bobi8344.github.io.git</span><br></pre></td></tr></table></figure><p>接着安装Hexo部署插件，一个hexo和Git关联的插件，win+r 输入cmd,调出终端窗口执行下面命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure><p>修改根目录下的 _config.yml 配置文件，注意这里必须使用SSH的方式（前面配置过）提交，否则会提交不了，因为在hexo2.0版本后，https的方式好像有Bug,我也踩了这个坑好久才跳出来</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  <span class="built_in">type</span>: git</span><br><span class="line">  repo: git@github.com:bobi8344/bobi8344.github.io.git</span><br></pre></td></tr></table></figure><p>最后在Git Bash执行Hexo部署命令，部署到Github上，打开<a href="https://bobi8344.github.io/" target="_blank" rel="noopener">https://bobi8344.github.io/</a>查看刚才部署的博客</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo d</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>HashMap学习</title>
      <link href="/HashMap%E5%AD%A6%E4%B9%A0.html"/>
      <url>/HashMap%E5%AD%A6%E4%B9%A0.html</url>
      
        <content type="html"><![CDATA[<h2 id="本文思维导图"><a href="#本文思维导图" class="headerlink" title="本文思维导图"></a>本文思维导图</h2><p><img src="https://bobi-1258060032.cos.ap-chengdu.myqcloud.com/Java/HashMap.png?q-sign-algorithm=sha1&q-ak=AKIDVnsTrvTgFf9G9myYbpmT3OVgeOypNtAE&q-sign-time=1567431563;1630503563&q-key-time=1567431563;1630503563&q-header-list=&q-url-param-list=&q-signature=ea88575ab261704c0152ca4977ee7e721d2d309c" alt="HashMap知识点"></p><a id="more"></a><h2 id="HashMap的存储特点"><a href="#HashMap的存储特点" class="headerlink" title="HashMap的存储特点"></a>HashMap的存储特点</h2><p>HashMap是Map接口的实现类，所以Map有的特点它也有：<br>1.HashMap存储的是以键值对形式双列数据，键值对即（key-value）<br>2.HashMap存储的是无序不可重复的数据<br>3.HashMap存储的数据可以是null值，key和value都可以是null值<br>4.HashMap的不可重复特指Key不可重复,value可以是重复的。</p><h2 id="HashMap如何保证添加的数据不重复"><a href="#HashMap如何保证添加的数据不重复" class="headerlink" title="HashMap如何保证添加的数据不重复"></a>HashMap如何保证添加的数据不重复</h2><p>HashMap底层数据结构是哈希表，在jdk1.7版本表现形式是数组+链表，jdk1.8中是数组+链表+红黑树，当需要往哈希表中添加数据时需要通过hash值和Equals方法去判断数据在哈希表中是否存在相同的数据。</p><p><img src="https://bobi-1258060032.cos.ap-chengdu.myqcloud.com/Java/hash_data_structure.png?q-sign-algorithm=sha1&q-ak=AKIDVnsTrvTgFf9G9myYbpmT3OVgeOypNtAE&q-sign-time=1567438101;1630510101&q-key-time=1567438101;1630510101&q-header-list=&q-url-param-list=&q-signature=1437633863269cb1def3067fe2431071391b9a6f" alt="hashMap数据结构"></p><p>实现过程：<br>1.首先第一次往哈希表添加数据时，会计算数据的key的hash值，从而计算出存放在数组索引位置，因为第一次添加，哈希表里面为空不涉及到比较hash值和equals方法，所以直接添加。<br>2.第二次添加数据时，也会计算数据的key的hash值，从而计算出存放在数组索引位置，当第二次添加时，算出的索引位置后会在数组中的索引位置查看是否有元素，没有也则直接添加。<br>3.当多次添加后，默认为16长度的大小数组大部分索引位置都有元素时，再次添加数据进来，计算出索引位置相同时，这时就要判断数据是否重复。</p><pre><code>当索引位置相同时，这又称为哈希碰撞。通过比较键值对中key值的hash值是否和数组中已有的键值对的key的hash值相同。    如果不相同的hash值，则在相同的索引位置以链表的形式把数据添加进去    如果相同hash值，则比较通过equals方法比较两个key值是否相同        如果不相同，则也在相同的索引位置以链表的形式把数据添加进去        如果相同，则不添加数据。</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (p.hash == hash &amp;&amp;</span><br><span class="line">((k = p.key) == key || (key != <span class="keyword">null</span> &amp;&amp; key.equals(k))))</span><br><span class="line">e = p;</span><br><span class="line"><span class="comment">//这里的代码对应上述的第三点</span></span><br></pre></td></tr></table></figure><p>总结：</p><table><thead><tr><th></th><th>比较索引值</th><th>比较hash值</th><th>比较equals方法</th><th>情况描述</th></tr></thead><tbody><tr><td>首次调用put()</td><td>不需要</td><td>不需要</td><td>不需要</td><td>直接添加</td></tr><tr><td>发生哈希碰撞</td><td>需要</td><td>需要</td><td>需要</td><td>hash值同equals值为false,替换value值</td></tr><tr><td>发生哈希碰撞</td><td>需要</td><td>需要</td><td>需要</td><td>hash值不同equals值为false,链表式添加</td></tr><tr><td>发生哈希碰撞</td><td>需要</td><td>需要</td><td>需要</td><td>hash值不同equals值为true,不添加</td></tr></tbody></table><h2 id="hash值如何计算"><a href="#hash值如何计算" class="headerlink" title="hash值如何计算"></a>hash值如何计算</h2><p>由上面的的保证HashMap数据不重复就可以看出hash值的重要性，那么hash值到低是什么东西？<br>Java中有一种哈希表数据结构,它通过hash算法算出的结果就是hash值,这个算法叫hash算法.<br>hash值怎么算?先了解hashCode方法,它是Object类中的一个用于计算哈希码的值即hash值的方法<br>这里我自定义一个JavaBean的Student类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> String name;</span><br><span class="line"><span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">     <span class="keyword">int</span> result = name != <span class="keyword">null</span> ? name.hashCode() : <span class="number">0</span>;</span><br><span class="line">     result = <span class="number">31</span> * result + (age != <span class="keyword">null</span> ? age.hashCode() : <span class="number">0</span>);</span><br><span class="line">     <span class="keyword">return</span> result;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>通过分析生成hashCode()，可以得知，hashCode涉及的计算算法与成员变量（name,age）有关<br>如果成员变量是基本数据类型的值， 那么用这个值 直接参与计算；<br>如果成员变量是引用数据类型的值，那么获取到这个成员变量的哈希码值后，再参数计算；</p><p>再通过查看String类重写的hashCode()方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="keyword">int</span> h = hash;</span><br><span class="line">      <span class="keyword">if</span> (h == <span class="number">0</span> &amp;&amp; value.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">          <span class="keyword">char</span> val[] = value;</span><br><span class="line">          <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; value.length; i++) &#123;</span><br><span class="line">              h = <span class="number">31</span> * h + val[i];</span><br><span class="line">          &#125;</span><br><span class="line">          hash = h;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> h;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>再写一个再main方法中的小测试：输出结果值为：3029737</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">String book = <span class="keyword">new</span> String(<span class="string">"book"</span>);</span><br><span class="line">System.out.println(book.hashCode());</span><br></pre></td></tr></table></figure><p>下面就来讲解这个值是怎么求出来的<br>book这四个字符在ASCII码表中的值分别是98，111，111，107</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">char</span> val[] = value;</span><br><span class="line">           <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; value.length; i++) &#123;</span><br><span class="line">               h = <span class="number">31</span> * h + val[i];</span><br><span class="line">           &#125;</span><br><span class="line">           hash = h;</span><br></pre></td></tr></table></figure><p>根据上面String重写的hashCode的核心代码：<br>31<em>98+98+31</em>111+111+31<em>111+111+31</em>107+107=3029737</p><p>所以对象的哈希码就是通过这样算出来的</p><p>那么这里有个关键问题：为什么要乘以31？</p><ol><li>因为31是一个奇质数，奇质数又是什么鬼？其实就是奇数中的质数，质数是与它相乘的数的结果只能被1和本身还有相乘数整除。<br>这样选择31作为乘积数的原因是希望能减少哈希码冲突，31是质子数中一个“不大不小”的存在，如果你使用的是一个如2的较小质数，那么得出的乘积会在一个很小的范围，很容易造成哈希值的冲突</li><li>31可以被JVM优化</li></ol><p>JVM里最有效的计算方式就是进行位运算了<br>左移运算 &lt;&lt; : 左边的最高位丢弃，右边补全0（把 &lt;&lt; 左边的数据*2的移动次幂）。</p><p>右移运算 &gt;&gt; : 把&gt;&gt;左边的数据/2的移动次幂。</p><p>无符号右移运算&gt;&gt;&gt; : 无论最高位是0还是1，左边补齐0。 　　</p><p>31 * i = (i &lt;&lt; 5) - i（左边  31<em>2=62,右边   2</em>2^5-2=62） 左右两边相等，JVM就可以高效的进行计算</p><p>31=  2的五次方-1   =（1&lt;&lt;5）-1  </p><p>(1&lt;&lt;5)-1 =    二进制的000001向左移动5位    100000-1=32-1=31</p><h2 id="hash值在HashMap中的应用"><a href="#hash值在HashMap中的应用" class="headerlink" title="hash值在HashMap中的应用"></a>hash值在HashMap中的应用</h2><p>hash值主要用于计算键值对存放的索引位置,利用hashCode()同时再结合对应JDK版本的扰动算法就能算出索引位置。这里主要用到三个运算符：与运算&amp; ,异或运算符^,无符号右移位运算符&gt;&gt;&gt;</p><p>与运算&amp;:     0&amp;0 =0 ,0&amp;1=0,1&amp;1=1,1&amp;0=0</p><p>异或运算^:     0&amp;0 =0 ,0&amp;1=1,1&amp;1=0,1&amp;0=1</p><p>无符号右移位运算符&gt;&gt;&gt;:    把二进制数向右移动多少位 如（1000 0000&gt;&gt;&gt;7）=0000 0001</p><h3 id="JDK1-8中的哈希表索引值计算"><a href="#JDK1-8中的哈希表索引值计算" class="headerlink" title="JDK1.8中的哈希表索引值计算"></a>JDK1.8中的哈希表索引值计算</h3><p>将 键key 转换成 哈希码（hash值）操作 = 使用hashCode() + 1次位运算 + 1次异或运算（2次扰动）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">hash</span><span class="params">(Object key)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">int</span> h;</span><br><span class="line">       <span class="keyword">return</span> (key == <span class="keyword">null</span>) ? <span class="number">0</span> : (h = key.hashCode()) ^ (h &gt;&gt;&gt; <span class="number">16</span>);</span><br><span class="line">       <span class="comment">//哈希码右位移运算16位再异或运算哈希码</span></span><br><span class="line">   &#125;</span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">indexFor</span><span class="params">(<span class="keyword">int</span> h, <span class="keyword">int</span> length)</span> </span>&#123;  </span><br><span class="line">         <span class="keyword">return</span> h &amp; (length-<span class="number">1</span>); </span><br><span class="line">         <span class="comment">// 将对哈希码扰动处理后的结果 与运算(&amp;) （数组长度-1）默认为16 数组长度-1=15=00001111，最终得到存储在数组table的位置（即数组下标、索引）</span></span><br><span class="line">         &#125;</span><br></pre></td></tr></table></figure><p>还是以上面的3029737为例 转换为二进制对应为0010 1110 0011 1010 1110 1001</p><p><img src="https://bobi-1258060032.cos.ap-chengdu.myqcloud.com/Java/hashcode_math.png?q-sign-algorithm=sha1&q-ak=AKIDVnsTrvTgFf9G9myYbpmT3OVgeOypNtAE&q-sign-time=1567440718;1630512718&q-key-time=1567440718;1630512718&q-header-list=&q-url-param-list=&q-signature=b13ec9d27e562c8eb8d5f94918e45d96cedd28c0" alt="hash值计算"></p><p>所以最终算出哈希表索引 index=0111 转换为10进制为7</p><h3 id="JDK1-7中的哈希表索引值计算"><a href="#JDK1-7中的哈希表索引值计算" class="headerlink" title="JDK1.7中的哈希表索引值计算"></a>JDK1.7中的哈希表索引值计算</h3><p>将键key 转换成 哈希码（hash值）操作  = 使用hashCode() + 4次位运算 + 5次异或运算（9次扰动）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">hash</span><span class="params">(<span class="keyword">int</span> h)</span> </span>&#123;</span><br><span class="line">        h ^= k.hashCode(); </span><br><span class="line">        h ^= (h &gt;&gt;&gt; <span class="number">20</span>) ^ (h &gt;&gt;&gt; <span class="number">12</span>);</span><br><span class="line">        <span class="keyword">return</span> h ^ (h &gt;&gt;&gt; <span class="number">7</span>) ^ (h &gt;&gt;&gt; <span class="number">4</span>);</span><br><span class="line">        <span class="comment">//</span></span><br><span class="line">     &#125;</span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">indexFor</span><span class="params">(<span class="keyword">int</span> h, <span class="keyword">int</span> length)</span> </span>&#123;  </span><br><span class="line">          <span class="keyword">return</span> h &amp; (length-<span class="number">1</span>); </span><br><span class="line">          <span class="comment">// 将对哈希码扰动处理后的结果 与运算(&amp;) （数组长度-1）默认为16 数组长度-1=15=00001111，最终得到存储在数组table的位置（即数组下标、索引）</span></span><br><span class="line">          &#125;</span><br></pre></td></tr></table></figure><p>只是运算次数改变，本质上的套路都是一样。</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HashMap </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
